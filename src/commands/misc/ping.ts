import { SlashCommandBuilder, type ChatInputCommandInteraction, type ShardClientUtil } from 'discord.js'
import type Bot from '../../bot'

export default class {
  data = new SlashCommandBuilder()
    .setName('ping')
    .setDescription('Mostra as informa√ß√µes da estabilidade do Twig')

  async execute (bot: Bot, interaction: ChatInputCommandInteraction): Promise<void> {
    const gateway = bot.client.ws.ping

    /*
      üèì | Pong!
      üì° | Shard 1/2
      ‚è±Ô∏è | Gateway Ping: `150ms`
      ‚ö° | API Ping: `...ms`
    */
    interaction.reply({
      content: 'üèì | Pong!\n' +
        `üì° | Shard ${(bot.client.shard as ShardClientUtil).ids[0] + 1}/${(bot.client.shard as ShardClientUtil).count}\n` +
        `‚è±Ô∏è | Gateway Ping: \`${gateway}ms\`\n` +
        '‚ö° | API Ping: `...ms`',
      ephemeral: false,
      fetchReply: true
    }).then(sent => {
      /*
        üèì | Pong!
        üì° | Shard 1/2
        ‚è±Ô∏è | Gateway Ping: `150ms`
        ‚ö° | API Ping: `417ms`
      */
      interaction.editReply('üèì | Pong!\n' +
        `üì° | Shard ${(bot.client.shard as ShardClientUtil).ids[0] + 1}/${(bot.client.shard as ShardClientUtil).count}\n` +
        `‚è±Ô∏è | Gateway Ping: \`${gateway}ms\`\n` +
        `‚ö° | API Ping: \`${sent.createdTimestamp - interaction.createdTimestamp}ms\``
      ).catch((err) => { bot.logger.error((err as Error).stack) })
    }).catch((err) => { bot.logger.error((err as Error).stack) })
  };
};
